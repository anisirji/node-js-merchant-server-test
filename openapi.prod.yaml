openapi: 3.0.3
info:
  title: Watch Merchant API
  description: |
    Demo watch merchant API with static product catalog for AP2 integration.

    This API provides endpoints for browsing luxury watches, managing shopping carts,
    calculating pricing, checking inventory, and placing orders.
  version: 1.0.0
  contact:
    name: API Support
    email: support@watchmerchant.demo

servers:
  - url: https://node-js-merchant-server-test.vercel.app/api/v1
    description: Production server (Vercel)

tags:
  - name: Products
    description: Browse and search watch products
  - name: Cart
    description: Shopping cart management
  - name: Pricing
    description: Price quotes and calculations
  - name: Inventory
    description: Stock availability checks
  - name: Shipping
    description: Shipping rates and options
  - name: Orders
    description: Order creation and management
  - name: Supporting
    description: Brands, categories, and collections

paths:
  /products:
    get:
      tags: [Products]
      summary: List products
      description: Get a list of watches with optional filtering, sorting, and pagination
      operationId: watches_listProducts
      parameters:
        - name: search
          in: query
          description: Search term for name, brand, or description
          schema:
            type: string
        - name: brand
          in: query
          description: Filter by brand (can be multiple)
          schema:
            oneOf:
              - type: string
              - type: array
                items:
                  type: string
        - name: category
          in: query
          description: Filter by category (can be multiple)
          schema:
            oneOf:
              - type: string
              - type: array
                items:
                  type: string
        - name: priceMin
          in: query
          description: Minimum price filter
          schema:
            type: number
        - name: priceMax
          in: query
          description: Maximum price filter
          schema:
            type: number
        - name: minRating
          in: query
          description: Minimum rating filter
          schema:
            type: number
            minimum: 0
            maximum: 5
        - name: tags
          in: query
          description: Filter by tags
          schema:
            oneOf:
              - type: string
              - type: array
                items:
                  type: string
        - name: inStock
          in: query
          description: Only show in-stock items
          schema:
            type: boolean
        - name: sort
          in: query
          description: Sort order
          schema:
            type: string
            enum: [price_asc, price_desc, rating, newest]
        - name: page
          in: query
          description: Page number (default 1)
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Items per page (default 20, max 100)
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
                  meta:
                    type: object
                    properties:
                      pagination:
                        $ref: '#/components/schemas/Pagination'

  /products/{id}:
    get:
      tags: [Products]
      summary: Get product by ID
      description: Retrieve detailed information about a specific watch
      operationId: watches_getProduct
      parameters:
        - name: id
          in: path
          required: true
          description: Product ID
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /products/slug/{slug}:
    get:
      tags: [Products]
      summary: Get product by slug
      description: Retrieve product by URL-friendly slug
      operationId: watches_getProductBySlug
      parameters:
        - name: slug
          in: path
          required: true
          description: Product slug
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /pricing/quote:
    post:
      tags: [Pricing]
      summary: Get price quote
      description: Calculate pricing breakdown including tax, shipping, and discounts
      operationId: watches_getPriceQuote
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                items:
                  type: array
                  items:
                    type: object
                    properties:
                      sku:
                        type: string
                      quantity:
                        type: integer
                        minimum: 1
                couponCode:
                  type: string
                shippingDestination:
                  type: object
                  properties:
                    country:
                      type: string
                      minLength: 2
                      maxLength: 2
                    postalCode:
                      type: string
              required: [items]
      responses:
        '200':
          description: Price quote
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/PricingBreakdown'

  /brands:
    get:
      tags: [Supporting]
      summary: List all brands
      description: Get list of watch brands with product counts
      operationId: watches_listBrands
      responses:
        '200':
          description: Brands list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  /categories:
    get:
      tags: [Supporting]
      summary: List all categories
      description: Get list of product categories
      operationId: watches_listCategories
      responses:
        '200':
          description: Categories list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  /collections:
    get:
      tags: [Supporting]
      summary: List all collections
      description: Get featured collections
      operationId: watches_listCollections
      responses:
        '200':
          description: Collections list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  /health:
    get:
      tags: [Supporting]
      summary: Health check
      description: API health status
      operationId: watches_healthCheck
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

components:
  schemas:
    Product:
      type: object
      properties:
        id:
          type: string
        sku:
          type: string
        name:
          type: string
        slug:
          type: string
        brand:
          type: string
        price:
          type: number
        currency:
          type: string
        images:
          type: array
          items:
            type: string
        description:
          type: string
        shortDescription:
          type: string
        stock:
          type: integer
        categories:
          type: array
          items:
            type: string
        specs:
          type: object
          properties:
            caseSize:
              type: string
            caseMaterial:
              type: string
            strapMaterial:
              type: string
            movement:
              type: string
            waterResistance:
              type: string
            crystalType:
              type: string
            warranty:
              type: string
        rating:
          type: number
        reviewCount:
          type: integer
        tags:
          type: array
          items:
            type: string
        weight:
          type: number
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    PricingBreakdown:
      type: object
      properties:
        subtotal:
          type: number
        tax:
          type: number
        shipping:
          type: number
        discount:
          type: number
        total:
          type: number
        shippingOptions:
          type: array
          items:
            $ref: '#/components/schemas/ShippingRate'

    ShippingRate:
      type: object
      properties:
        carrier:
          type: string
        service:
          type: string
        cost:
          type: number
        estimatedDays:
          type: string

    InventoryStatus:
      type: object
      properties:
        sku:
          type: string
        available:
          type: boolean
        quantity:
          type: integer
        leadTime:
          type: string

    CustomerInfo:
      type: object
      properties:
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        phone:
          type: string
      required: [email, firstName, lastName]

    ShippingInfo:
      type: object
      properties:
        address:
          type: object
          properties:
            line1:
              type: string
            line2:
              type: string
            city:
              type: string
            state:
              type: string
            postalCode:
              type: string
            country:
              type: string
          required: [line1, city, state, postalCode, country]
        method:
          type: string
      required: [address, method]

    Order:
      type: object
      properties:
        orderId:
          type: string
        cartId:
          type: string
        status:
          type: string
          enum: [pending_payment, processing, shipped, delivered, cancelled]
        items:
          type: array
          items:
            type: object
        customer:
          $ref: '#/components/schemas/CustomerInfo'
        shipping:
          $ref: '#/components/schemas/ShippingInfo'
        pricing:
          $ref: '#/components/schemas/PricingBreakdown'
        payment:
          type: object
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Pagination:
      type: object
      properties:
        page:
          type: integer
        limit:
          type: integer
        total:
          type: integer
        totalPages:
          type: integer

    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
        meta:
          type: object

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: object
          properties:
            code:
              type: string
            message:
              type: string
            details:
              type: object
